AA added seconds() function to take timing of the force function. Took 26.583683 seconds with 108 atoms, almost 100% of the time taken by the whole program.
AA (almost) removed division in the loop, took 22.009221 seconds. Use of perf record suggests that pow is a bottleneck.
AA (almost) removed use of pow() in the loop, and redefined ffac, took 13.426059 seconds, almost 2x faster.
AA removed use of sqrt() in the loop, then removed completely the use of pow() with float exponent, took 3.395514 seconds, almost 8x faster than original version.
AA moved the computation of a few constants out of the loops and added inlining, performance does not change.
AA added if condition with flag _OPENMP in order to use the 3rd Newton's law whenever openmp is not used. Took 1.670593 seconds in that case, almost 16x faster than original version.
MB added naive parallel implementation with OpenMP. Takes longer with more threads than serial version
MB added atomic operations and benchmarking data for larger problem size
MB added benchmark plot for OMP 2916 atoms
AA fixed problem with inlining of azzero() and pbc() functions, dynamic library for the python wrapper can now be created
AA-MB started working on the cuda force kernel but did not manage to finish
SP First trial for implementation of Morse potential usage
